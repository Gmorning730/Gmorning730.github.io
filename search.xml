<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库系统概论-chart2关系数据库</title>
      <link href="/2023/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-chart2%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-chart2%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>关系数据库是支持关系模型的数据库系统。第一章初步介绍了关系模型及其基本的概念。本章将深入的解析。关系模型。按照关系模型的三个要素关系模型由关系数据库关系操作集合和关系完整性约束三部分组成。下面分别对这三部分进行介绍。</p><p>h关系模型的数据结构很简单，只包含单一的数据结构关系。而我们看来呢？ 就是一张扁平的二维表。<br>域：域是一组相互数据类型的值的集合。<br>笛卡尔集：笛卡尔集是两组域乘积。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论-chart1绪论</title>
      <link href="/2023/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-chart1%E7%BB%AA%E8%AE%BA/"/>
      <url>/2023/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-chart1%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p><strong>数据</strong> 数据是数据库中存储的基本对象。那么什么是数据呢？描述事物的符号就称为数据。描述事物的符号可以是数字，也可以是别的表现形式。它们都经过数字化后计入计算机。数据的含义称为数据的语义。数据与其语义是不可分割的。</p><p><strong>数据库</strong> 顾名思义就是存放数据的仓库。只不过呢，这个仓库是存放在计算机上，并且有一定的格式存放要求。那么数据库的严格意义是长期存储在计算机内有组织的可共享的大量数据的集合。这些数据从应用程序中抽象出来。按一定的规模进行组织，使它具有较小的冗余度，较高的数据独立性和易扩展性，能够实现各个用户之间的共享。</p><p><strong>数据库管理系统</strong> 数据库管理系统是位于用户与操作系统之间的一个数据管理软件。那么数据库管理系统和操作系统一样，是计算机的基础软件，也是一个庞大的软件系统。它主要有几下方面功能。数据的定义。数据组织。数据操作数据库事务管理和运行管理。数据库建立和功能维护。</p><p><strong>数据库系统</strong> 什么数据库系统呢？总而言之，它是由数据数据库，数据库管理系统，应用程序和数据库管理员组成的具有存储管理，处理和维护数据的系统。</p><h3 id="2-数据库的发展"><a href="#2-数据库的发展" class="headerlink" title="2.数据库的发展"></a>2.数据库的发展</h3><p><strong>第一个阶段是人工管理阶段</strong> 那个时候呢硬件发展不完全，软件也没有操作系统。没有管理数据的软件数据的处理方式就是批处理。那个时候有数据有哪些特点呢？</p><p>(1)首先是数据它不能保存。其次，应用程序管理数据。数据是需要有应用程序来管理的。这样会增加程序员的负担。并且应用程序要明确数据的这个规范和逻辑。</p><p>(2) 数据不共享。因为那个时候的数据是面向应用程序的，它一组数据只能由一个程序来对应。如果涉及到多个应用程序访问同一个数据的时候。必须独立的定义，无法相互使用参考。</p><p>(3) 数据没有独立性，数据的逻辑结构和物理结构发生变化呢？必须对应用程序进行相应的修改，数据完全依赖于应用程序。</p><p><strong>第二个阶段是文件系统阶段</strong> 这个时候呢，硬件软件有了相应的提升，软件软件方面，操作系统也有了专门的数据管理软件，一般称为是文件系统。</p><p>这个时期文件管理系统有哪些特点呢？<br>数据可以长期保存的。数据是由文件系统来进行管理,但是仍然存在一些缺点:</p><p>(1) 数据的共享性差。为什么呢？在系统中。一个文件基本对应一个应用程序文件还是面向应用程序的。当不同的应用程序具有部分相同的数据时，必须建立各自的文件而不能共享。</p><p>(2) 其次是数据的独立性差。文件系统中的文件还是为应用服务,文件逻辑结构针对的是应用来进行设计的,如果想要在文件中数据加一些新的应用会很难。</p><p><strong>第三个阶段是数据库阶段</strong> 这个时候软硬件的情况又是如何呢？硬件已经有了，磁盘硬件的价格下降，软件价格上升。</p><p>在这个背景下，文件系统作为数据管理的手段，您不能满足应用的需求。于是就诞生了专门的数据管理软件系统数据库管理系统，用数据库系统管来管理数据呢。最明显的优点就是从文件到数据库系统，标志着数据管理技术的飞跃。</p><h3 id="3数据库系统的特点"><a href="#3数据库系统的特点" class="headerlink" title="3数据库系统的特点"></a>3数据库系统的特点</h3><p>(1) 结构化。数据库系统实现整体数据的结构化。这是数据库的主要特征之一，也是数据库系统与文件系统的本质区别。结构化该怎么理解呢。作为整体的结构化就是指数据库中的数据。它不再是仅仅针对某一个应用，而是面向于整个组织或企业。不仅数据内部是结构化的，而且整体是结构化的，数据之间是有关联的。</p><p>(2) 数据的共享性高冗余低且易扩展。因为数据的共享呢，它就可以减少数据的冗余，节约存储空间。避免。内容的不一致性。</p><p>(3) 数据的独立性高。数据独立性是借助数据库一个显著的优点。而独立性呢，分为两个方面，一个是物理独立性和逻辑独立性。物理独立性。它是指用户的应用程序和数据库中的数据存储是相互独立的。数据在数据库中怎么存储数据库管理系统等，用户不需要去了解应用程序。主要处理的是数据的逻辑结构。逻辑，独立性。指用户的应用程序与数据库的逻辑结构是相互独立的。当数据库发生逻辑改变时，用户应用程序也可以不变。</p><p>(4) 数据由数据库管理系统统一的管理和控制。数据库管理系统还满足下方面的数据控制功能。</p><ul><li>数据安全性保护</li><li>数据完整性检查</li><li>并发控制</li><li>数据库恢复</li></ul><h2 id="二、数据模型"><a href="#二、数据模型" class="headerlink" title="二、数据模型"></a>二、数据模型</h2><p>(1) 概念模型<br>概念模型它是根据用户的需求和观点对数据进行建模用于数据库 用于数据库的设计。<br>概念模型。包括一些基本的概念，实体、属性、码、实体型、实体集、联系。分别进行一一解释。</p><p><strong>实体</strong>：观存在并且可以相互区分的事物。<br><strong>属性</strong>：实体具有的特性称为属性。<br><strong>码</strong>：唯一标识实体的属性称为码。<br><strong>实体型</strong>：用实体名及属性名集合来抽象刻画同类实体，称为实体型。<br><strong>实体集</strong>：全体的实体集合，称为实体集。<br><strong>联系</strong>：实体之间的联系，通常指不同实体集之间的联系。</p><p>(2) 逻辑模型和物理模型<br>概念模型、逻辑模型、包括层次模型网状模型关系模型等等。主要实现数据库管理系统的实现。是从计算机的角度进行建模。</p><p>数据模型</p><p>数据模型通常由数据结构数据操作数据完整性约束组成。数据结构描述数据库的组成对象以及对象之间的联系。数据操作是指数据库中各种对象和实例允许执行的操作的结合，包括操作及有关的操作规则。数据的完整性，约束条件。是一组完全解信规则。</p><p>常见的数据模型呢？网状模型，层次模型，关系模型。</p><h2 id="三、数据库系统结构"><a href="#三、数据库系统结构" class="headerlink" title="三、数据库系统结构"></a>三、数据库系统结构</h2><p>数据库，系统模式的概念。有形和值的概念。模式是数据库中全体数据的逻辑结构和特征的描述。它仅仅涉及型的描述，不涉及值的描述。因此模式是相对稳定的，而实例是相对变化的。数据库中的数据可能会随着时间的变化而变改变，但是数据库的模式是不会变的。</p><p>数据库的三级模式是指的数据库由外模式模式和内模式三级构成。模式也称逻辑模式。它是指全局数据的逻辑结构。是所有用户的公共数据视图。而外模式呢，又称为子模式。或用户模式？是数据库，用户能够看见或使用的。描述。内模式也称为存储模式。一个数据库只有一个内模式是物数据物理结构和存储方式描述。</p><h3 id="四、数据库系统的组成"><a href="#四、数据库系统的组成" class="headerlink" title="四、数据库系统的组成"></a>四、数据库系统的组成</h3><p>数据库系统分别由以下部分组成。第一部分，硬件平台和数据库。第二部分软件第三部分人员。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart6线性空间和线性变换</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart6%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E5%92%8C%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart6%E7%BA%BF%E6%80%A7%E7%A9%BA%E9%97%B4%E5%92%8C%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>线性空间是线性代数的基本研究对象之一，线性空间是向量空间的扩展，它使向量和向量空间的概念更具有一般性，同时也更加抽象。本章将给出一般线性空间的概念，并介绍线性空间上的一种重要对应关系，即线性变换和线性变换所对应的矩阵之间的关系。</p><h3 id="1-线性空间的概念"><a href="#1-线性空间的概念" class="headerlink" title="1.线性空间的概念"></a>1.线性空间的概念</h3><p>我们曾定义过向量空间，那么对于线性空间的定义：在集合v的元素之间定义加法对于任意的。两个元素，它们的和也属于这个元素对加法封闭。在集合中的元素与数域的元素之间进行数量乘法，如果两种运算满足下面的运算律，那么v是P上的一个线性空间。</p><ul><li>交换律</li><li>结合律</li><li>负元素</li><li>0元素</li><li>分配律</li><li>零律</li></ul><h3 id="2-线性子空间"><a href="#2-线性子空间" class="headerlink" title="2.线性子空间"></a>2.线性子空间</h3><p>如果线性空间的一个非空子集，对于加法和数乘都是封闭的，那么，它就是线性空间的一个子空间。</p><h3 id="3-线性空间的基维数与坐标"><a href="#3-线性空间的基维数与坐标" class="headerlink" title="3.线性空间的基维数与坐标"></a>3.线性空间的基维数与坐标</h3><p>什么是线性空间的基？线性空间的基是构成这个线性空间中所有向量的基础 如果这组基存在任意的一组系数，与之相乘等于零，这组基是线性相关的,否则是线性无关的。</p><h3 id="4-基变换与坐标变换"><a href="#4-基变换与坐标变换" class="headerlink" title="4.基变换与坐标变换"></a>4.基变换与坐标变换</h3><p>在N维线性空间中任意N个线性无关的向量都可以去做该向量空间的记忆。对于不同的基。从一个向量的坐标一般是不同的那么随着基的改变。向量的坐标是如何变化的？向量基的一个到另一个的变化通常由其变化矩阵来实现。我们称之为过渡矩阵。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart5二次型</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart5%E4%BA%8C%E6%AC%A1%E5%9E%8B/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart5%E4%BA%8C%E6%AC%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>二次型就是二次齐次多项式，它起源于对二次型曲线和二次曲面分类问题的讨论。它的理论和方法在多元函数求极限、运动稳定性、网络最优化、经济管理等方面有着广泛的作用。</p><h3 id="二次型及其矩阵表示。"><a href="#二次型及其矩阵表示。" class="headerlink" title="二次型及其矩阵表示。"></a>二次型及其矩阵表示。</h3><p>什么是二次型？<br>对于含有N。个变量的二次齐次多项式。就叫做二次型</p><p>那么二次型该如何转换成矩阵表达式？通常情况下我们会根据二次型中不同次数的方程的系数在相应的位置进行填入，主对角线长的位置从左上角到右下角分别是X的一次幂，二次幂，一直到N次幂。而对于X1和X2来说，他们填入的位置是第一行第二列，且系数要除以二。根据这样的规则进行填充我们可以实现将二次型转换为矩阵表达式。</p><h3 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h3><p>什么是线性变换呢对于两组向量如果这两组向量之间可以相互表示形如X等于Cy的形式那么我就称X到Y1个线性变换</p><h3 id="二次型化为标准型"><a href="#二次型化为标准型" class="headerlink" title="二次型化为标准型"></a>二次型化为标准型</h3><p>任何一个N元的实二次型都可以经过一个正交变换变成为标准型</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart4矩阵的相似对角化</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart4%E7%9F%A9%E9%98%B5%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%AF%B9%E8%A7%92%E5%8C%96/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart4%E7%9F%A9%E9%98%B5%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%AF%B9%E8%A7%92%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>矩阵的相似对角化是线性代数中的一个重要的问题，所以我们需要在接下来的过程中去求解。最佳的方程组。与此同时展开它与矩阵的特征值及特征向量密切相关模式识别经济学中的动态经济模型研究社会学中的人口迁移问题有着重要的作用。</p><h3 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h3><p>首先第一个概念向量空间。什么是向量空间呢？在一个空间内即满足任意的两个向量都属于这个空间任意常数乘以这一个向量也属于这个空间。那么我们就定义这是向量空间，那么在空间上定义一个二元实函数。称为内积。且具有如下的性质：</p><ul><li>线性性</li><li>对称性</li><li>正定性</li></ul><p>称向量为欧几里得向量。</p><h3 id="标准正交基"><a href="#标准正交基" class="headerlink" title="标准正交基"></a>标准正交基</h3><p>在欧式空间R的N次幂中如果一组非零向量两两正交,那么则称为一个正交向量组;如果一个基中的向量两两正交称这个基为正交基;如果一个正交基中的向量都是单位向量称这个标准正交向量。</p><p>正交矩阵的定义如果N阶方阵满足a的转置乘以a等于a乘以a的转置等于单位矩阵那么称a为正交矩阵正经正经</p><h3 id="矩阵的特征值与特征向量"><a href="#矩阵的特征值与特征向量" class="headerlink" title="矩阵的特征值与特征向量"></a>矩阵的特征值与特征向量</h3><p>什么是特征值呢如果对于一个方阵存在一个数Lambda和非零向量X使得a乘以X等于Lambda乘以X那么Lambda就是a的一个特征值而X称X为a的属于特征值的一个特征向量特征值与特征向量有哪些性质呢？一个方阵和它的转置有着相同的特征值。一个矩阵属于不同特征值的特征向量是线性无关的。</p><h3 id="矩阵的相似对角化"><a href="#矩阵的相似对角化" class="headerlink" title="矩阵的相似对角化"></a>矩阵的相似对角化</h3><p>什么是矩阵的相似矩阵呢？如果存在N阶可逆矩阵P。使得B等于P的逆乘以a乘以P。那么称a和B相似，记。作a波浪线B。这是矩阵P称为相似变换矩阵。矩阵可相似对角化有一些条件。首先第一个定理，如果N阶方阵a可以相似对角化，那么它的充要条件是a有N个线性无关的特征向量。N阶方阵a可相似。对角化的充要条件是a的每个特征值的代数重数等于它的几何重数。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart3线性方程组与矩阵的初等变换</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5%E7%9A%84%E5%88%9D%E7%AD%89%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5%E7%9A%84%E5%88%9D%E7%AD%89%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-线性方程组和矩阵的相似对角化"><a href="#第三章-线性方程组和矩阵的相似对角化" class="headerlink" title="第三章 线性方程组和矩阵的相似对角化"></a>第三章 线性方程组和矩阵的相似对角化</h1><p>线性方程组理论是线性代数最基本的内容，实际生活中有很多问题可以总结为线性方程组的求解。在方程的数量和未知数的个数相同时，我们可以用到克拉默法则判定方程组的解，然而在实际生活中，方程的阶数和方程的个数不一定相等，这一章我们通过矩阵的初等变换来讨论线性方程组的求解方法。</p><h2 id="1-高斯消元法"><a href="#1-高斯消元法" class="headerlink" title="1.高斯消元法"></a><strong>1.高斯消元法</strong></h2><p>其实高斯消元法就是我们在初中和小学时学到的方程组的求解，然而当时的我们只是使用这种求解方法而不知道他的名字，现在我们一起去了解一下解方程组的高斯消元法</p><p>三种变换：</p><ul><li>换法变换</li><li>倍法变换</li><li>消元变换</li></ul><p>其实消元变换就是换法变换和倍法变换的组合。</p><h3 id="1-1增广矩阵"><a href="#1-1增广矩阵" class="headerlink" title="1.1增广矩阵"></a>1.1增广矩阵</h3><p>增广矩阵就是在我们方程组的系数矩阵的右边加上方程组的解，这样在变换的过程中，只要我们使得方程组左边只剩下一个未知变量，那么对应的右边便是方程组的解。</p><h3 id="1-2行阶梯型矩阵"><a href="#1-2行阶梯型矩阵" class="headerlink" title="1.2行阶梯型矩阵"></a>1.2行阶梯型矩阵</h3><p>行阶梯行矩阵就是像阶梯一样的矩阵每个台阶只有一行，阶梯线下方的元素都为0。</p><p>要注意的问题：<br>想想实际生活中，阶梯有没有可能长度不一样，如果有的话会不会影响行走？阶梯的高度有没有可能不一样？如果有的话会不会影响行走，这样你就会明白为什么叫做<strong>行阶梯</strong>了。</p><p>在求解过程中，如果方程的未知数多余方程的个数，那么这个时候会存在自由未知量，当方程有无数个解时，其中的一个解便是<strong>特解</strong>（特殊的一个解）。</p><h2 id="2矩阵的初等变换和矩阵的秩"><a href="#2矩阵的初等变换和矩阵的秩" class="headerlink" title="2矩阵的初等变换和矩阵的秩"></a><strong>2矩阵的初等变换和矩阵的秩</strong></h2><p>初等矩阵：对单位矩阵E进行一次初等变换之后的矩阵，在初等变换矩阵这里有一个重要的概念就是，对矩阵进行初等行变换相当于左乘初等变换矩阵，列变换相当于右乘。</p><p>矩阵的秩：矩阵的秩是线性代数中一个重要的概念，用于描述矩阵的线性相关性和维度。秩可以帮助我们理解矩阵的性质和解决一些问题。矩阵的秩表示的是他行或列线性无关组的向量行数或列数。如果拿k阶子是来解释的话，即矩阵的存在一个r阶子式不为0，r+1阶子式全为0，那么矩阵的秩为r。</p><p>矩阵的秩有一些常见的性质：</p><ul><li>矩阵的秩不超过它的行数或列数。</li><li>对于一个n×n的方阵，如果它的秩等于n，那么它是满秩的，表示它的行向量组或列向量组是线性无关的，它是可逆的。</li><li>对于一个m×n的矩阵，它的秩不超过m和n中的较小值，如果秩等于m或n，那么它是满秩的，表示它的行向量组或列向量组是线性无关的。</li></ul><h2 id="3线性方程组的解的判定定理"><a href="#3线性方程组的解的判定定理" class="headerlink" title="3线性方程组的解的判定定理"></a><strong>3线性方程组的解的判定定理</strong></h2><p>对于线性方程组而言：<br>（1）形如Ax&#x3D;b的矩阵有解的充要条件是R(A)&#x3D;R(A,b)&#x3D;r，当满足有解的条件下r&#x3D;n是有唯一解，r&lt;n时有无穷多解<br>（2）形如Ax&#x3D;0的矩阵一定有解，当R(A)&#x3D;n时候只有零解（唯一解）r&lt;n时候有非零解（无穷多解）<br>这样对应起来记忆会更好一点~</p><h2 id="4向量组的线性相关性"><a href="#4向量组的线性相关性" class="headerlink" title="4向量组的线性相关性"></a><strong>4向量组的线性相关性</strong></h2><p>定义：一组向量的线性组合称为向量组的线性组合（？说了好像没说，看图）</p><div>    <img src="/.io//linerc.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 向量的线性组合</h4></div><p>向量组的等价：两组向量可以由对方彼此相互表示，则说明这两组向量是等价的。</p><p>线性相关和线性无关：对于一个向量组，如果存在一个不全为0的一组系数，使得这组向量为0，那么他们便是线性相关的，否则便是线性无关的。另外，一组向量线性相关的充要条件是R(A)&lt;n,线性无关的条件是R(A)&#x3D;n。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart2矩阵及其运算</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart2%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart2%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-矩阵及其运算"><a href="#第二章-矩阵及其运算" class="headerlink" title="第二章 矩阵及其运算"></a>第二章 矩阵及其运算</h1><p>第二章我们研究的是矩阵以及运算，这里我们特别的要区分一下矩阵和行列式的不同之处，一个是多维的向量，一个是数值，可不要被他外边包裹的小小的符号“[ ]”,“| |”所迷惑！</p><h2 id="1-矩阵的定义"><a href="#1-矩阵的定义" class="headerlink" title="1.矩阵的定义"></a><strong>1.矩阵的定义</strong></h2><p>同样的，我们从方程组中抽象出来的用“[ ]“包裹的数表叫做矩阵，但是，仔细观察你就会发现，矩阵不一定是方阵，因此他的行数和列数不一定相等，而且矩阵的数表里面有等号右边→_→的结果。在实际生活中，矩阵常常伴随着每一维度不同的含义，通常行代表不同的样本，列代表不同的属性。当且仅当行数等于列数时候，矩阵是方阵。</p><p>特殊矩阵：</p><ul><li>三角矩阵：矩阵的内容刚好填充了上三角或或下三角的内容</li><li>对角矩阵：对角线都为零</li><li>数量矩阵：对角线都为相同的数，特别的，当全部都为1时成为单位矩阵。</li></ul><h2 id="2-矩阵的运算"><a href="#2-矩阵的运算" class="headerlink" title="2.矩阵的运算"></a><strong>2.矩阵的运算</strong></h2><h3 id="2-1矩阵的加法运算"><a href="#2-1矩阵的加法运算" class="headerlink" title="2.1矩阵的加法运算"></a>2.1矩阵的加法运算</h3><p>对应矩阵位置的数相加，特别的需要他们的维度相同。</p><h3 id="2-2矩阵的数乘运算"><a href="#2-2矩阵的数乘运算" class="headerlink" title="2.2矩阵的数乘运算"></a>2.2矩阵的数乘运算</h3><p>和行列式要区分开，k乘以一个矩阵等于乘以所有的数。</p><h3 id="2-3矩阵的乘法运算"><a href="#2-3矩阵的乘法运算" class="headerlink" title="2.3矩阵的乘法运算"></a>2.3矩阵的乘法运算</h3><p>矩阵的乘法需要满足正确的维度<code>(n, m)x (m, k)</code>，谈到矩阵乘法就想起一个非常经典的动态规划问题。<br><font size="4" face="kaiti" color="#f45b1f">特别的，矩阵满足结合律和分配律，不满足交换律</font></p><h3 id="2-4矩阵的转置"><a href="#2-4矩阵的转置" class="headerlink" title="2.4矩阵的转置"></a>2.4矩阵的转置</h3><p>互换矩阵的行和列，相当于沿时钟方向旋转一个角度。特别的: $$（AB)^T &#x3D; B^TA^T$$</p><h3 id="2-5矩阵的共轭"><a href="#2-5矩阵的共轭" class="headerlink" title="2.5矩阵的共轭"></a>2.5矩阵的共轭</h3><div>    <img src="/.io//ge.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 共轭矩阵的定义</h4></div><h3 id="2-6-方阵的行列式"><a href="#2-6-方阵的行列式" class="headerlink" title="2.6 方阵的行列式"></a>2.6 方阵的行列式</h3><p>由<strong>n阶方阵</strong>构成的行列式，叫做矩阵的行列式，记作detA 当|A|&#x3D;0时方阵是奇异的，|A|!&#x3D;0 称为非奇异的。</p><h2 id="3-可逆矩阵"><a href="#3-可逆矩阵" class="headerlink" title="3.可逆矩阵"></a><strong>3.可逆矩阵</strong></h2><p>可逆矩阵的定义：方阵A，存在B，AB&#x3D;BA&#x3D;E，则称A是可逆矩阵且B是A的逆矩阵，否则不可逆。矩阵是否可逆决定了他对应的矩阵方程是否有解。以下是一些常见的可逆矩阵的性质。</p><div>    <img src="/.io//keni.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 可逆的性质</h4></div><p>相应的在求解矩阵方程中，如果未知数矩阵的左右两边的系数矩阵是可逆的，那么利用可逆矩阵的性质我们可以对未知数矩阵进行消参，从而实现方程组的求解。</p><h2 id="2-分块矩阵"><a href="#2-分块矩阵" class="headerlink" title="2.分块矩阵"></a><strong>2.分块矩阵</strong></h2><p>顾名思义，分块矩阵就是对矩阵进行分块，从而分割成更小的矩阵。特别的，如果你对矩阵按照每一行每一列的方式进行分块的话，那么就称为行分块和列分块。那分块矩阵有什么用呢？</p><p>其实最大的用途就是我们可以根据特殊矩阵的性质将大的矩阵分解成小的矩阵简化计算，当A B是相同分发的分块对角阵时，它有着如下一些性质：</p><div>    <img src="/.io//part.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 可逆的性质</h4></div>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-chart1行列式</title>
      <link href="/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart1%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
      <url>/2023/07/11/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-chart1%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>这一章我们主要学习线性代数最基础的一个概念——行列式，它的作用在线性代数中不容小觑。他很简洁，但是正是因为它的简洁使得线性方程组的计算尤为简单明了。我们会从它的基本定义和作用进行分析，最后讲解一个重要的性质——克拉默法则作为本章的收尾。</p><h1 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h1><h2 id="1-什么是行列式"><a href="#1-什么是行列式" class="headerlink" title="1.什么是行列式"></a><strong>1.什么是行列式</strong></h2><p>在线性代数中，我们把n元方程组的系数抽象出来的一个用 “||”符号包裹着的n列数列称为行列式。行列式在线性代数的计算过程中发挥着重要的作用，他清晰的从方程组抽象出 简洁的“数据”，从而直观的进行计算和分析。这里的阶数是指未知数的个数。</p><p>PS：值得注意的是，行列式其实是“方行列式”，即行数和列数是相等的，总的个数为n^2。</p><h2 id="2-行列式的概念定义"><a href="#2-行列式的概念定义" class="headerlink" title="2.行列式的概念定义"></a><strong>2.行列式的概念定义</strong></h2><p>行列式有一个非常神奇的性质，如果从算法的角度去理解的话，就是分而治之。（实际问题中，我们手算的极限是三阶行列式，真正去那计算机解决行列式的计算，我认为递归是一种很好的方式，在排除复杂度分析的情况下。）当你展开一个三阶行列式，你会发现可以用一行或者一列的系数乘以除了这个数所在行列的二阶行列式的乘积。如果你愿意动手去算一下，你会发现事实确实如此，因此行列式的概念定义为：</p><div>    <img src="/.io//essence.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 行列式的定义</h4></div><p>对于余子式和代数余子式，你可以从他的名字直观地理解：余子式，就是除了他本身所在行列余下的式子，而代数余子式则是带有代数符号的余子式，而真正的行列式的展开是<strong>代数余子式</strong>参与运算的，注意这一点。</p><h2 id="3-行列式的性质"><a href="#3-行列式的性质" class="headerlink" title="3.行列式的性质"></a><strong>3.行列式的性质</strong></h2><p>接下来我们会介绍一些行列式最基本的性质，这些性质很基础使我们日后分析计算的基石：</p><ul><li>性质1：转置行列式相等</li></ul><div>    <img src="/.io//proof1.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图2 转置相等证明</h4></div><p>其实从行列式的概念性质我们就可以知道，转置对于代数余子式只改变的加法的交换顺序，在这里我们只考虑对[1,2,3]进行展开（读者考虑一下为什么我们证明时候只考虑一种特殊的展开方式？），而同样的二阶的行列式转置只改变了减数（bc）乘法的交换顺序，因此三阶行列式的转换是等价的。同样的可以用归纳法去总结n阶行列式的转置不变性。</p><ul><li><p>性质2：某一行或某一列的公因子可提到行列式外面，反之亦然<br>这个其实很好理解，当你以这一行含有k的未知数的行列式去展开就会发现代数余子式的每一项都多了一个k，整体提出来便是原来行列式的k倍。</p></li><li><p>性质3：行列式交换，行列式变号。</p></li><li><p>性质4：某一行是两个元素之和，可以拆成两个行列式的之和。<br>还是从定义的角度去拆解，类似性质2</p></li><li><p><strong>性质5</strong>：某一行（列）乘以k加到另外一行（列），值不变（线性变化）</p></li><li><p><strong>性质6</strong>：某一行（列）元素和另外一行（列）元素的代数余子式乘积之和为0（经常用来计算）</p></li><li><p>性质7：范德蒙行列式</p></li></ul><div>    <img src="/.io//fdm.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图2 转置相等证明</h4></div><ul><li>性质8：（克拉默法则）如果线性方程组的系数行列式不为0，那么方程组有唯一解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2023/07/11/template/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/07/11/template/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="1-图片模板"><a href="#1-图片模板" class="headerlink" title="1.图片模板"></a>1.图片模板</h3><div>    <img src="/2023/07/11/template/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/essence.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 6px;">    <h4 style="text-align: center;color: #403f3d;font-family:kaiti">图1 行列式的定义</h4></div> <h3 id="2-音乐模板"><a href="#2-音乐模板" class="headerlink" title="2.音乐模板"></a>2.音乐模板</h3><div style="background-color: #c5e8ed; border: 2px solid black; border-radious:3px">    <font color="#252525" size="6" face="??">section1: ???????</font></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode设置自动保存功能</title>
      <link href="/2023/07/11/vscode%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/07/11/vscode%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="设置vscode自动保存功能"><a href="#设置vscode自动保存功能" class="headerlink" title="设置vscode自动保存功能"></a>设置vscode自动保存功能</h3><p><a href="https://blog.csdn.net/qq_70703397/article/details/129281455">转载</a></p><ol><li>shift + ctrl + p快速打开设置</li><li>搜索Auto Save</li><li>根据功能选择相应的实现方式，我选择的是在焦点变化时保存（当你鼠标换到屏幕内的另一个地方）<div> <img src="/2023/07/11/vscode%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/save.png" height="300px" style="border: solid #c3c3c2;border-radius: 5px;"> <h4 style="text-align: center;color: #403f3d">图1 设置自动保存方式</h4></div></li></ol><h3 id="设置vscode终端使用默认cmd"><a href="#设置vscode终端使用默认cmd" class="headerlink" title="设置vscode终端使用默认cmd"></a>设置vscode终端使用默认cmd</h3><p><a href="https://blog.csdn.net/shoppingend/article/details/118700194">转载</a></p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 经验技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统学习笔记-chart1绪论</title>
      <link href="/2023/07/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-chart1%E7%BB%AA%E8%AE%BA/"/>
      <url>/2023/07/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-chart1%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机系统</title>
      <link href="/2023/07/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/07/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 系统专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/05/hello-world/"/>
      <url>/2023/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><br>哈哈: ![tupian]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数的本质</title>
      <link href="/2023/07/05/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8-chart1/"/>
      <url>/2023/07/05/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8-chart1/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到线性代数的世界，在这里我会分享我的学习心得，一同探讨线性代数的交流与应用。课程来源 YouTube 博主 3Blue1Brown 的制作课程：<a href="https://www.youtube.com/playlist?list=PLj2xWy-jIS7TgnCluPmIxaq9wNODGPINs">Essence of linear algebra</a>，通过直观生动的方式用动画讲述线性代数的本质，话不多说，我们一起开始吧！</p><h2 id="第一章节"><a href="#第一章节" class="headerlink" title="第一章节"></a>第一章节</h2><h3 id="1-向量的定义"><a href="#1-向量的定义" class="headerlink" title="1.向量的定义"></a>1.向量的定义</h3><p>不同的人们有着不同的观点：</p><ul><li><p>物理学家认为他们是具有大小和方向的箭头，主要保持这两个属性一致，那么这个箭头无论移动哪里都是一样的向量；</p></li><li><p>计算机科学家认为向量拥有不同维度列表，列表的每一行都代表着不同的维度，这样的定义使得他们可以在分析和建模更好的把握这个世界。</p></li><li><p>数学家的理解是这两个概念的综合：向量存在任何可以相加和相乘的含义都是向量。</p></li></ul><h3 id="2-向量的表示"><a href="#2-向量的表示" class="headerlink" title="2.向量的表示"></a>2.向量的表示</h3><p>向量可以用带有长度的箭头和包含相应维度的列表来表示。在线性代数中，向量被定义为从起点开始，这和物理学家的认识有些不同。在描述一个向量时候，我们通常用第一个维度描述沿着x轴走了多少，第二个维度沿着y轴走了多少</p><h3 id="3-向量运算"><a href="#3-向量运算" class="headerlink" title="3.向量运算"></a>3.向量运算</h3><ul><li><p>向量加法</p><div>    <img src="/.io//add.jpg" height="300px" style="border: solid #c3c3c2;border-radius: 5px;">    <h4 style="text-align: center;color:##403f3d">图2 向量数乘的表示</h4></div><p>向量的加法用 ”行走的案例“ 来说明的话，表示你起点沿着两个向量行走的，最终和你按照这两个向量的和行走到达的目的地相同。</p></li><li><p>向量数乘</p><div>    <img src="/.io//multiply.png" height="300px" style="border: solid #c3c3c2;border-radius: 5px;">    <h4 style="text-align: center;color: #403f3d">图2 向量数乘的表示</h4></div><p>向量的数乘可以理解为沿着原来向量的方向来回移动，对向量的线性扩张。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的常见操作</title>
      <link href="/2023/07/02/Hexo%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
      <url>/2023/07/02/Hexo%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>Hexo是一个快速、简洁且高效的博客框架，利用Hexo可以很方便的搭建属于自己的个人博客。</strong> 之前总是挤不出时间（借口）这次终于有机会（<del>作业</del>）搭建一个属于自己的博客了。虽然搭建的过沉重遇到了各种各样的问题，但是客服重重困难之后看到自己的<code>最终的</code>的博客还是由衷的开心 (smile) 。在这里对自己在搭建过程中遇到的一些问题做一个简要的总结，希望可以帮到一些还在驻足观望的朋友（拉上船）<i class="iconfont icon-word"></i></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-配置hexo"><a href="#1-配置hexo" class="headerlink" title="1 配置hexo"></a>1 配置hexo</h3><ol><li><p>首先要安装hexo，在安装之前，要保证已经安装了node.js + npm，详细的安装教程见 <a href="https://hexo.io/zh-cn/docs/">Hexo官方教程文档</a></p></li><li><p>第二步安装基本插件，这一过程中你需要安装最基本的插件才能完成相应的部署，在这个阶段我只安装了<code>hexo-deployer-git</code>这个插件，有了它才能使用<code>hexo deploy</code>将你的本地文件推送到github page。<br>安装命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-选择主题："><a href="#2-选择主题：" class="headerlink" title="2 选择主题："></a>2 选择主题：</h3><p>你个好看的主题是你博客的灵魂（坚定），所以选择自己喜欢的主题才能 <del>勾引</del> 吸引更多的游客；其次，自己看的心旷神怡是坚持写作的动力！</p><p>主题的话我个人推荐下面两个主题：</p><ul><li>NexT<br>NexT这个主题主打两个字：<code>简洁，简洁，还是***的简洁</code> 很商务的那种，适合沉稳冷静的人</li><li>Butterfly<br>Butterfly <font size="5" face="微软雅黑" weight="30">恰 恰 相 反</font></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NexT: npm install hexo-theme-next</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Butterfly: git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Gmorning730/Gmorning730.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">本地图片上传插件：</span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line">音乐插件：</span><br><span class="line">hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>部署配置：</p><p>重启博客：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
